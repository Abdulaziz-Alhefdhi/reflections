What happens when you initialize a repository? Why do you need to do it?

	it creates a .git folder and recongnizes my current location as a repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	You can't work on the files in it, so it's not a working directory.
	It doesn't have a history, so it's not a repository. You add what you want to be tracked and committed.

How can you use the staging area to make sure you have one commit per logical
change?

	use the command (git diff --staged) to know what changes are staged and see if they form a logical unit of change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	for example, I want to do an experiment with multiple commits, or say another version of my project with different format

How do the diagrams help you visualize the branch structure?

	I can see them and know what branches I have and how their structure is.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	having everything added to the branches since the split into one merged branch.
	to know the parents and see a clear history.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	doing it manually will insure accuracy, but it's time concuming. Automatic merging is pretty handy.